/*
 CONTROL FLOW
 
 Оператор break - прервывет выполнение цыкла или условия и переводит следующую за ними команду.
 Оператор continue - прервывет выполнение данной итерации цыкла и переходит к следующей итерации
    игнорируя следующий за ним код.
 Оператор fallthrough - не прерывает выполнение switch после первого совпадения.
 Оператор where - вводит дополнителное условие 
 
 IF==============================================================
    if условие {
        тело условия
    }
 
    if условие {
        тело условия1
    } else if (условие2) {
        тело условия2
    }
 
    if условие {
        тело условия1
    } else if условие2 {
        тело условия2
    } else {
        тело условия3
    }
 
    if (..<5).contains(tenantCount) {
        тело условия
    }
 
 
 SWITCH==========================================================
    var pizzaKind = "Hawaiian"
    switch (pizzaKind) {
        case "Hawaiian": действие1
        case "Pepperonni": действие2
        case "Four season": действие3
        default: действие4                      Выполняется если ни один из предыдущих вариантов
                                                не подошёл, может отсутствовать.
    }
 
    let num = 32
    switch (num) {
        case 1...50 where num % 2 != 0: print("match")  С помощью оператор where включается доп условие,
                                                        что num должно быть чётное.
    }
 
    let num = 32
    switch (num) {
        case 2, 5, 32:
            print("match")                   В case может перечислятся несколько значений.
    }
 
    let answer: (code: Int, message: String) = (code: 404, message: "Page not found")
    switch answer {
    case (100..<400, _):
        print( answer.message )
    case (400..<500, _):
        assert( false, answer.message )
    default:
        print( "Получен некорректный ответ" )
    }
 
    switch dragonCharacteristics {
    case ("зеленый", 0..<2 ):
        print("Вольер No 1")
    case ("красный", 0..<2 ):
        print("Вольер No 2")
    case ("зеленый", let weight) where weight > 2 && dragonsCount < 5,  Связываем значение второго элемента
                                                кортежа с локальной константой weight и уже после where
                                                объявлем для неё условие. Благодяря этомуИ мы можем
                                                использовать этк константу не только после where но и в
                                                теле case-блока.
 
 
 
 
 
 FOR FOR-IN======================================================
    let range = 1...10
    for i in range {                            Значение i меняется в диапазоне от 1 до 10
        if (i % 2 != 0) {
            print(i)
        }
    }
 
    for i in 1...10 where i % 2 == 0 {          Можем так же вводить дополнительное условие с where
        result += i
    }
    
    let drinks = ["Coffe", "Tea", "Beer", "Vine"]
    for drink in drinks {                       Переменная drink автоматически определяется как String
                                                и на каждой итерации меняет свое значение на следующее
                                                и массива строк.
        print(drink)
    }
 
    let resultsOfGames = ["Red Wings": ["2:1","2:3"], "Capitals": ["3:6","5:5"],"Penguins": ["3:3","1:2"]]
    for (teamName, results) in resultsOfGames {         Выводим мноргомерный массив.
        for oneResult in results {
            print("Игра с \(teamName)  — \(oneResult)")
        }
    }
    Консоль
    Игра с Capitals — 3:6
    Игра с Capitals — 5:5
    Игра с Red Wings — 2:1
    Игра с Red Wings — 2:3
    Игра с Penguins — 3:3
    Игра с Penguins — 1:2
    
 Методы:
    .stride(from: начало, through: конец, by: шагом)  Возвращает последовательность от [Начало до Конец],
                                                      с шагом Шаг.
    .stride(from: начало, to: конец, by: шагом)       Возвращает последовательность от [Начало до Конец),
                                                      с шагом Шаг.
    
 
 
 WHILE REPEAT-WHILE==============================================
 
    while условие {
        тело цикла
    }
 
    repeat {                                    Данный цыкл выполнится зотябы один раз.
         тело цыкла
    } while условие
 
 
 
 GUARD===========================================================
 
    guard проверяемоеУсловие else {             Данное условие срабатывает если проверяемоеУсловие false
        тело условия + (return / break / continue / throw)
    }
    Данный оператор имеет одно ограничение, его тело должно содержать один из следующих операторов:
    return, break, continue, throw
 
 ASSERT==========================================================
 
 assert(проверяемоеВырожениеТипаБул, отладочноеСообщениеТипаСтринг) Отладочное сообщение выводится в
                                                                    сдучае проверяемого выражения true
                                                                    при этом программа аварийно завершится.
 assert(false, "Указана некорректная оценка")   Можно принудительно задать условие false, например в
                                                связке с switch-case.
 
 
 
 
 
 
 
 */
