/*
COLLECTIONS
 
 Array===================================================================
    Упорядоченый набор элементов одного типа, каждый из которых может встречаться много раз.
    Обявление:
    var friendsNames = ["Alexey", "Oleg", "Vitaliy", "Anatoliy", "Taras", "Evgeniy", "Valentina"]
        or
    let numbers: [Int] = [2, 5, 7, 3, 5]
        or
    var num: [Double]   Проинициализировать любое колличество эллементов массиву, можно будет потом.
 
    Методы:
    .append(значение)                   Добавления занчения в конец массива.
    .insert(значение, at: 2)            Добавление значения в качестве третьего элемента.
    .remove(at: 4)                      Удаляет элемент по заданному индексу.
    .count                              Возвращает колличество эллементов.
    .isEmpty                            Возвращает true если массив пуст и false сли нет.
    .max                                Максимальный элемент
    .min                                Минимальный элемент
    .forEach {переменная in действие}   Замыкание, которое перебирает переменные и применяе к каждой действие
        friendsNames.forEach { fr in print("\(fr) still my friend") }
 
    print(numbers)                      // [2, 5, 7, 3, 5]
 
 
 Set=====================================================================
    Неупорядоченый набор элементов одного типа, каждый из которых может встречаться только один раз.
    Обявление:
    var evenNumbers = Set([2, 4, 6, 8])
    let oddNumbers: set = [1, 3, 5, 7, 9, 9]
 
    Методы:
    .insert(значение)                   Добавляет значение если его еще нет в множестве иначе ничего не произойдет.
    .remove(занчение)                   Удаляет значение если его еще нет в множестве иначе ничего не произойдет.
 
    print(oddNumbers)                      // [1, 3, 5, 7, 9]
 
 
 Dictionary==============================================================
    Неупорядоченный набор пар (ключ: значение)
    Обявление:
    var scores = ["Paris": 5, "Marina": 10, "Tim": 9, "Jon": 14]
        or
    var scores: [String: Int] = ["Paris": 5, "Marina": 10, "Tim": 9, "Jon": 14]
        or
    var scores: [String: Int] = [:]
 
    Методы:
    .scores.updateValue(17, forKey: "Bob") Добавляем или изменяем существующее значение.
        or
    scores["Bob"] = 17
 
    print(scores["Paris"]!)                // 5
 
 
 Tuples==================================================================
    Упорядоченый набор элементов одного или разных типов, типы и колличесво которых изыестны зарание.
    Обявление:
    let props = (22, "age")                В данном случае можно обратиться к элементам кортежа
                                           по номеру, как в массиве point.0    // 22
        or
    var userInfo: (Bool, Int, String) = (true, 34, "Tom")
        or
    var point(x: 2, y: 8)                  В данном случае можно обратиться к элементам кортежа,
                                           как по номеру, так и по псевдониму point.y    // 8
 
    Методы:
 
 
 Range===================================================================
    
    1...4                                  // 1, 2, 3, 4
    1..<5                                  // 1, 2, 3, 4
    ...43                                  // от -inf до 43
    -21...                                 // от -21 до +inf
 
    switch (32) {
        case 0...30: ...
        case 31...60: ...
        case 61...90: ...
    }
 
    Методы:
    .contains(32)                          Проверяет содержит ли диапазон число 32
 
 
 
 */
